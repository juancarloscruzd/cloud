AWSTemplateFormatVersion: "2010-09-09"


Parameters:
  MyAllowedIP:
    Type: String
    Default: "0.0.0.0/0"
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
    Description: Only enter t2.micro value
  Keyname:
    Type: String
    Default: "ec2-keypair"
  Appname:
    Type: String
    Default: "ya"
  VpcCidr:
    Type: String
    Default: "10.1.0.0/16"

  subnetcidr:
    Type: CommaDelimitedList
    Default: "10.1.1.0/24 , 10.1.2.0/24, 10.1.3.0/24"

Mappings:
  RegionMap:
    us-west-1 :
      "32"  : "ami-0841edc20334f928"
      "64"  : "sdfasdfasdf"
    us-west-2 :
      "32"  : "ami-0841edc20334f9287-32"
      "64"  :  "ami-0528a5175983e7f28"


Resources: 

  VpcName:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: True
      EnableDnsSupport: True
      CidrBlock: !Ref VpcCidr
      Tags: 
        - Key : appname
          Value: !Ref Appname
        - Key : Name
          Value : !Sub VPC-${AWS::StackName}

  ## Two subnet
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcName
      CidrBlock: !Select [0, !Ref subnetcidr]
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ""


  ## Internet Gateway
  AppInternetGateway:
    Type: AWS::EC2::InternetGateway

  AppInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref AppInternetGateway
      VpcId: !Ref VpcName
      #VpnGatewayId: String

  APPRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VpcName

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: AppInternetGateway
    Properties:
       RouteTableId:
         Ref: APPRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: AppInternetGateway



  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref APPRouteTable
      SubnetId: !Ref Subnet1


  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    #GroupName: "localsecuritygroup"
    #GroupDescription: Allow ssh from mypc
    Properties: 
      #GroupName: "localsecuritygroup"
      GroupDescription: Allow ssh from mypc
      VpcId: !Ref VpcName
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref MyAllowedIP
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        CidrIp: !Ref VpcCidr
      SecurityGroupEgress: 
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        CidrIp: !Ref VpcCidr




  EC2AccessLambdaRole:
    DependsOn: LambdaFunction
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EC2AccessLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "lambda:*"
                Resource: '*'
              




  RootInstanceProfile:
    DependsOn: EC2AccessLambdaRole
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2AccessLambdaRole




  EC2Instance:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ""
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", "64" ]
      InstanceType: !Ref InstanceTypeParameter
      IamInstanceProfile: !Ref RootInstanceProfile
      KeyName: !Ref Keyname

      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeleteOnTermination: "true"
        DeviceIndex: "0"
        GroupSet: 
#          - !GetAtt 
#            - VpcName
#            - DefaultSecurityGroup
          - !Ref AppSecurityGroup
        SubnetId: !Ref Subnet1
      UserData: 
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            touch /tmp/testfile
      Tags:
        - Key : Name
          Value : !Sub ec2-${AWS::StackName}


  LambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  
  LambdaPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "LambdaPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action: 
              - "ec2:*"
              - "logs:*"
            Resource: "*"
      Roles: 
        - 
          Ref: "LambdaRole"
    
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
          - LambdaRole
          - Arn 
      Code:
        ZipFile: !Sub |
          import json
          def lambda_handler(event, context):
            print("Lambda Invoke Payload " + str(event))
            return {'statusCode': 200,'body': 'Hello from Lambda!', "payload" : str(event)}
      Runtime: python3.7
      Tags:
        - Key : Name
          Value : !Sub Lambda-${AWS::StackName}

    
  SecoundLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 
          - LambdaRole
          - Arn 
      Code:
        ZipFile: !Sub |
          import json
          def lambda_handler(event, context):
            print("Lambda Invoke Payload " + str(event))
            return {'statusCode': 200,'body': 'Hello from Second Lambda!', "payload" : str(event)}
      Runtime: python3.7
      Tags:
        - Key : Name
          Value : !Sub SecondLambda-${AWS::StackName}



  LambdaVPCEndpoint:
    DependsOn:
      - LambdaFunction
      - VpcName
      - Subnet1
      - AppSecurityGroup
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: True
      #RouteTableIds: 
      #  - !Ref APPRouteTable
      SecurityGroupIds: 
        - !Ref AppSecurityGroup
      ServiceName: com.amazonaws.us-west-2.lambda
      SubnetIds: 
        - !Ref Subnet1
      VpcEndpointType: Interface
      VpcId: !Ref VpcName

Outputs:
  FirstLambdaFunction:
    Description: Security Groups that are associated with the EC2 instance
    Value: !Ref LambdaFunction
  
  SecondLambdaFunction:
    Description: Security Groups that are associated with the EC2 instance
    Value: !Ref SecoundLambdaFunction

  InstanceID:
    Description: Instance Name 
    Value: !Ref EC2Instance

  InstancePrivateIP:
    Description: Instance IP
    Value: !GetAtt EC2Instance.PrivateIp
  
  InstancePublicIP:
    Description: Instance IP
    Value: !GetAtt EC2Instance.PublicIp

  AvailabilityZone:
    Value: !Join [":", !GetAZs "" ]
